services:
    nginx:
        image: elenarughi2/sd_nginx:latest
        container_name: nginx
        hostname: nginx
        ports:
            - "9000:80"
        networks:
            - nodeapp_network
        depends_on:
            - nodeapp1
            - nodeapp2
    nodeapp1:
        image: elenarughi2/sd_nodeapp:latest
        container_name: nodeapp1
        hostname: nodeapp
        command: ["nodejs", "index.js", "mongodb://mongodb1:27017,mongodb2:27017,mongodb3:27017/todo?replicaSet=rs&serverSelectionTimeoutMS=60000", "true"]
        networks: 
            - nodeapp_network
        depends_on:
            - mongodb1
            - mongodb2
            - mongodb3
    nodeapp2:
        image: elenarughi2/sd_nodeapp:latest
        container_name: nodeapp2
        hostname: nodeapp
        command: [ "nodejs", "index.js", "mongodb://mongodb1:27017,mongodb2:27017,mongodb3:27017/todo?replicaSet=rs&serverSelectionTimeoutMS=60000", "false" ]
        networks:
            - nodeapp_network
        depends_on:
            - mongodb1
            - mongodb2
            - mongodb3
            - nodeapp1
    mongodb1:
        image: elenarughi2/sd_mongodb:latest
        container_name: mongodb1
        hostname: mongodb1
        command: [ "--replSet", "rs", "--bind_ip_all" ]
        healthcheck:
            test: test $$(echo "rs.initiate({_id:'rs',members:[{_id:0,host:\"mongodb1:27017\"},{_id:1,host:\"mongodb2:27017\"},{_id:2,host:\"mongodb3:27017\"}]}).ok || rs.status().ok" | mongo --quiet) -eq 1
            interval: 10s
            start_period: 30s
        networks:
            - nodeapp_network
    mongodb2:
        image: elenarughi2/sd_mongodb:latest
        container_name: mongodb2
        hostname: mongodb2
        command: ["--replSet", "rs", "--bind_ip_all"]
        networks:
            - nodeapp_network
    mongodb3:
        image: elenarughi2/sd_mongodb:latest
        container_name: mongodb3
        hostname: mongodb3
        command: ["--replSet", "rs", "--bind_ip_all"]
        networks:
            - nodeapp_network

networks:
    nodeapp_network:
        driver: bridge
        driver_opts:
            com.docker.network.bridge.name: "brnodeapp"
